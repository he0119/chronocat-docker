name: Build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Check

    runs-on: ubuntu-latest

    outputs:
      skip: ${{ steps.check-version.outputs.skip }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Fecth latest chronocat version
        id: version
        shell: python
        run: |
          import urllib.request, json, os
          res = urllib.request.urlopen("https://api.github.com/repos/chrononeko/chronocat/releases?per_page=1").read()
          releases = json.loads(res)
          version = releases[0]["tag_name"]
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"version={version}\n")
      
      - name: Fecth latest docker version
        id: docker-version
        shell: python
        run: |
          import urllib.request, json, os
          res = urllib.request.urlopen("https://hub.docker.com/v2/repositories/${{ github.repository_owner }}/chronocat-docker/tags/?page_size=2&page=1&ordering=last_updated").read()
          releases = json.loads(res)
          for release in releases["results"]:
              if release["name"] != "latest":
                  version = release["name"]
                  break
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"docker_version={version}\n")
      
      - name: Check if docker version is newer
        id: check-version
        shell: python
        env:
          DOCKER_VERSION: ${{ steps.docker-version.outputs.docker_version }}
          CHRONOCAT_VERSION: ${{ steps.version.outputs.version }}
        run: |
          from packaging import version
          import os
          skip = False
          if version.parse(os.environ["DOCKER_VERSION"]) >= version.parse(os.environ["CHRONOCAT_VERSION"]):
              skip = True
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"skip={skip}\n")

  build:
    name: Build

    runs-on: ubuntu-latest

    needs: check

    if: needs.check.outputs.skip != 'True'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Tags
        uses: docker/metadata-action@v4
        id: metadata
        with:
          images: |
            ${{ github.repository_owner }}/chronocat-docker
            ghcr.io/${{ github.repository_owner }}/chronocat-docker
          tags: |
            latest
            ${{ needs.check.outputs.version.outputs.version }}

      - name: Build and Publish
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          build-args: |
            CHRONOCAT_VERSION=${{ needs.check.outputs.version.outputs.version }}
